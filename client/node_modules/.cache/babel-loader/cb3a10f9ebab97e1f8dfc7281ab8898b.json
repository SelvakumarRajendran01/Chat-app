{"ast":null,"code":"import * as actionTypes from \"../actions/actionTypes\";\nconst INITIAL_STATE = {\n  prevDisplayName: \"\",\n  displayName: \"\",\n  profileImage: null,\n  email: \"\",\n  chatRooms: null,\n  lastSeen: null,\n  accountCreatedAt: \"\",\n  searchedUsers: [],\n  id: \"\",\n  prevStatus: \"\",\n  friendList: null,\n  status: \"\",\n  updatingDisplayName: false,\n  updatingStatus: false,\n  updatingPhoto: false,\n  signUpErrors: null,\n  signInErrors: null,\n  isSigningUp: false,\n  isSearchingUsers: false\n};\nconst userReducer = (state = INITIAL_STATE, action) => {\n  const {\n    type,\n    payLoad\n  } = action;\n  switch (type) {\n    case actionTypes.SET_USER_DETAIL:\n      {\n        const {\n          displayName,\n          profileImage,\n          email,\n          chatRooms,\n          lastSeen,\n          createdAt,\n          status,\n          _id: id,\n          prevStatus,\n          prevDisplayName,\n          friendList\n        } = payLoad;\n        return {\n          ...state,\n          displayName,\n          profileImage,\n          email,\n          chatRooms,\n          lastSeen,\n          accountCreatedAt: createdAt,\n          id,\n          status,\n          prevStatus,\n          prevDisplayName,\n          friendList,\n          signUpErrors: null\n        };\n      }\n    case actionTypes.GET_USERS_BY_NAME:\n      return {\n        ...state,\n        searchedUsers: payLoad,\n        isSearchingUsers: false\n      };\n    case actionTypes.GET_MESSAGE:\n      {\n        const {\n          roomIndex,\n          roomId,\n          ...newChat\n        } = payLoad;\n        let chatRooms = [...state.chatRooms];\n        let newChatInRoom;\n        chatRooms = chatRooms.filter(room => {\n          if (room._id === roomId) {\n            newChatInRoom = room;\n            return false;\n          }\n          return true;\n        });\n        if (!newChatInRoom) {\n          return {\n            ...state\n          };\n        }\n        newChatInRoom.chats.push(newChat);\n        chatRooms.unshift(newChatInRoom);\n        return {\n          ...state,\n          chatRooms\n        };\n      }\n    case actionTypes.SET_UPDATING_DISPLAY_NAME:\n      return {\n        ...state,\n        updatingDisplayName: true\n      };\n    case actionTypes.UNSET_UPDATING_DISPLAY_NAME:\n      return {\n        ...state,\n        updatingDisplayName: false\n      };\n    case actionTypes.SET_UPDATING_PHOTO:\n      return {\n        ...state,\n        updatingPhoto: true\n      };\n    case actionTypes.UNSET_UPDATING_PHOTO:\n      return {\n        ...state,\n        updatingPhoto: false\n      };\n    case actionTypes.SET_UPDATING_STATUS:\n      return {\n        ...state,\n        updatingStatus: true\n      };\n    case actionTypes.UNSET_UPDATING_STATUS:\n      return {\n        ...state,\n        updatingStatus: false\n      };\n    case actionTypes.ADD_CHAT_TO_ROOM:\n      {\n        const {\n          text,\n          roomId\n        } = payLoad;\n        const chatRooms = [...state.chatRooms];\n        const index = chatRooms.findIndex(room => room._id === roomId);\n        chatRooms[index].chats.push({\n          sender: state.id,\n          text,\n          time: Date.now()\n        });\n        return {\n          ...state,\n          chatRooms\n        };\n      }\n    case actionTypes.SET_SIGN_UP_ERRORS:\n      return {\n        ...state,\n        signUpErrors: payLoad,\n        isSigningUp: false\n      };\n    case actionTypes.CLEAR_SIGN_UP_ERRORS:\n      return {\n        ...state,\n        signUpErrors: null,\n        isSigningUp: false\n      };\n    case actionTypes.SET_SIGN_IN_ERRORS:\n      return {\n        ...state,\n        signInErrors: payLoad\n      };\n    case actionTypes.CLEAR_SIGN_IN_ERRORS:\n      return {\n        ...state,\n        signInErrors: null\n      };\n    case actionTypes.IS_SIGNING_UP:\n      return {\n        ...state,\n        isSigningUp: true\n      };\n    case actionTypes.SET_IS_SEARCHING_USERS:\n      return {\n        ...state,\n        isSearchingUsers: true\n      };\n    case actionTypes.UNSET_IS_SEARCHING_USERS:\n      return {\n        ...state,\n        isSearchingUsers: false\n      };\n    default:\n      return state;\n  }\n};\nexport default userReducer;","map":{"version":3,"names":["actionTypes","INITIAL_STATE","prevDisplayName","displayName","profileImage","email","chatRooms","lastSeen","accountCreatedAt","searchedUsers","id","prevStatus","friendList","status","updatingDisplayName","updatingStatus","updatingPhoto","signUpErrors","signInErrors","isSigningUp","isSearchingUsers","userReducer","state","action","type","payLoad","SET_USER_DETAIL","createdAt","_id","GET_USERS_BY_NAME","GET_MESSAGE","roomIndex","roomId","newChat","newChatInRoom","filter","room","chats","push","unshift","SET_UPDATING_DISPLAY_NAME","UNSET_UPDATING_DISPLAY_NAME","SET_UPDATING_PHOTO","UNSET_UPDATING_PHOTO","SET_UPDATING_STATUS","UNSET_UPDATING_STATUS","ADD_CHAT_TO_ROOM","text","index","findIndex","sender","time","Date","now","SET_SIGN_UP_ERRORS","CLEAR_SIGN_UP_ERRORS","SET_SIGN_IN_ERRORS","CLEAR_SIGN_IN_ERRORS","IS_SIGNING_UP","SET_IS_SEARCHING_USERS","UNSET_IS_SEARCHING_USERS"],"sources":["/Users/mohanselva/Documents/whatsapp-MERN/client/src/store/reducers/userReducer.js"],"sourcesContent":["import * as actionTypes from \"../actions/actionTypes\";\n\nconst INITIAL_STATE = {\n  prevDisplayName:\"\",\n  displayName: \"\",\n  profileImage: null,\n  email: \"\",\n  chatRooms: null,\n  lastSeen: null,\n  accountCreatedAt: \"\",\n  searchedUsers: [],\n  id: \"\",\n  prevStatus:\"\",\n  friendList:null,\n  status: \"\",\n  updatingDisplayName: false,\n  updatingStatus: false,\n  updatingPhoto: false,\n  signUpErrors:null,\n  signInErrors:null,\n  isSigningUp:false,\n  isSearchingUsers:false,\n};\n\nconst userReducer = (state = INITIAL_STATE, action) => {\n  const { type, payLoad } = action;\n\n  switch (type) {\n    case actionTypes.SET_USER_DETAIL: {\n      const {\n        displayName,\n        profileImage,\n        email,\n        chatRooms,\n        lastSeen,\n        createdAt,\n        status,\n        _id: id,\n        prevStatus,\n        prevDisplayName,\n        friendList,\n      } = payLoad;\n      return {\n        ...state,\n        displayName,\n        profileImage,\n        email,\n        chatRooms,\n        lastSeen,\n        accountCreatedAt: createdAt,\n        id,\n        status,\n        prevStatus,\n        prevDisplayName,\n        friendList,\n        signUpErrors:null,\n      };\n    }\n    case actionTypes.GET_USERS_BY_NAME:\n      return { ...state, searchedUsers: payLoad, isSearchingUsers:false };\n\n    case actionTypes.GET_MESSAGE: {\n      const { roomIndex, roomId, ...newChat } = payLoad;\n      let chatRooms = [...state.chatRooms];\n      let newChatInRoom;\n      chatRooms = chatRooms.filter((room) => {\n        if (room._id === roomId) {\n          newChatInRoom = room;\n          return false;\n        }\n        return true;\n      });\n      if(!newChatInRoom)\n        {\n          return {...state};\n        }\n      newChatInRoom.chats.push(newChat);\n      chatRooms.unshift(newChatInRoom);\n      return { ...state, chatRooms };\n    }\n\n    case actionTypes.SET_UPDATING_DISPLAY_NAME:\n      return { ...state, updatingDisplayName: true };\n    case actionTypes.UNSET_UPDATING_DISPLAY_NAME:\n      return { ...state, updatingDisplayName: false };\n\n    case actionTypes.SET_UPDATING_PHOTO:\n      return { ...state, updatingPhoto: true };\n    case actionTypes.UNSET_UPDATING_PHOTO:\n      return { ...state, updatingPhoto: false };\n\n    case actionTypes.SET_UPDATING_STATUS:\n      return { ...state, updatingStatus: true };\n    case actionTypes.UNSET_UPDATING_STATUS:\n      return { ...state, updatingStatus: false };\n\n    case actionTypes.ADD_CHAT_TO_ROOM:{\n      const {text,roomId} = payLoad;\n      const chatRooms = [...state.chatRooms];\n      const index = chatRooms.findIndex(room => room._id === roomId);\n      chatRooms[index].chats.push({\n        sender:state.id,\n        text,\n        time:Date.now(),\n      });\n      return {...state,chatRooms};\n    }\n    case actionTypes.SET_SIGN_UP_ERRORS:\n      return {...state,signUpErrors:payLoad,isSigningUp:false};\n    case actionTypes.CLEAR_SIGN_UP_ERRORS:\n      return {...state, signUpErrors:null,isSigningUp:false};\n    case actionTypes.SET_SIGN_IN_ERRORS:\n      return {...state,signInErrors:payLoad};\n    case actionTypes.CLEAR_SIGN_IN_ERRORS:\n      return {...state,signInErrors:null}\n    case actionTypes.IS_SIGNING_UP:\n      return {...state,isSigningUp:true};  \n    case actionTypes.SET_IS_SEARCHING_USERS:\n      return {...state, isSearchingUsers:true};\n    case actionTypes.UNSET_IS_SEARCHING_USERS:\n      return {...state,isSearchingUsers:false};   \n    default:\n      return state;\n  }\n};\n\nexport default userReducer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}